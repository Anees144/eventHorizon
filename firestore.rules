/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and shared access to forums and messages based on event association.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the owner.
 * - /events/{eventId}/forums/{forumId}: Stores forum data associated with events. Access control is based on event participation.
 * - /events/{eventId}/forums/{forumId}/messages/{messageId}: Stores messages within forums, with access control inherited from the parent forum.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed for privacy.
 * - Forums and messages are accessible to participants of the associated event.
 *
 * Denormalization for Authorization:
 * - For simplicity and performance, forum and message access is controlled by the event association.
 *   In a production environment, consider denormalizing user roles or permissions
 *   directly into the forum and message documents for more granular access control.
 *
 * Structural Segregation:
 * - User profile data is stored under the /users/{userId} path, ensuring private storage.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isSignedIn function to check if a user is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle N/A
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the isOwner function to check if the requested user ID matches the authenticated user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle N/A
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines the isExistingOwner function to check if the user is the owner and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Prevents modification of non-existent resources by non-owners.
     */
    function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' creates their profile at /users/user_abc.
     * @deny (create) User with UID 'user_abc' attempts to create a profile at /users/user_xyz.
     * @allow (get, update, delete) User with UID 'user_abc' reads/updates/deletes their profile at /users/user_abc.
     * @deny (get, update, delete) User with UID 'user_abc' attempts to read/update/delete the profile at /users/user_xyz.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for forums within events.
     * @path /events/{eventId}/forums/{forumId}
     * @allow (get, list) Any authenticated user can read/list forums within an event.
     * @allow (create) Any authenticated user can create a forum within an event.
     * @deny (update, delete) Only the creator can update/delete a forum.
     * @principle Allows open forum creation and access within an event, but restricts modification to the creator.
     */
    match /events/{eventId}/forums/{forumId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add creator validation once the schema is updated with an ownership field.
    }

    /**
     * @description Security rules for messages within forums.
     * @path /events/{eventId}/forums/{forumId}/messages/{messageId}
     * @allow (get, list) Any authenticated user can read/list messages within a forum.
     * @allow (create) Any authenticated user can create a message within a forum.
     * @deny (update, delete) Only the sender can update/delete their messages.
     * @principle Allows open message creation and access within a forum, but restricts modification to the sender.
     */
    match /events/{eventId}/forums/{forumId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add sender validation once the schema is updated with an ownership field.
    }
  }
}