/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to events while restricting event creation, updates,
 * and deletion to the event organizer. Forums and messages are secured based on the
 * event they belong to, with only authorized users able to create, update, or delete them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only by the user.
 * - /events/{eventId}: Stores event data. Publicly readable, but only the organizer can modify.
 * - /events/{eventId}/forums/{forumId}: Forums associated with events.  Creation restricted to organizers.
 * - /events/{eventId}/forums/{forumId}/messages/{messageId}: Messages within forums, access controlled via forum membership.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Events are publicly readable but only the organizer can modify them.
 * - Listing of user documents is denied to protect user privacy.
 *
 * Denormalization for Authorization:
 * - Events should include an `organizerId` field to simplify ownership checks.
 * - Forums and Messages inherit authorization from the parent Event.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, ensuring only the user can access their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages event data, allowing public reads but restricting writes to the organizer.
     * @path /events/{eventId}
     * @allow (get, list) Any user can read event data.
     * @allow (create, update, delete) User with ID 'user123' can modify event if they are the organizer.
     * @deny (create, update, delete) User with ID 'user456' cannot modify event if they are not the organizer.
     * @principle Allows public read access with owner-only writes, and validates the organizer ID on creation.
     */
    match /events/{eventId} {
      function isOrganizer(organizerId) {
        return request.auth != null && request.auth.uid == organizerId;
      }

      function isExistingOrganizer(organizerId) {
        return isOrganizer(organizerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOrganizer(request.resource.data.organizerId) && request.resource.data.organizerId == request.auth.uid;
      allow update: if isExistingOrganizer(resource.data.organizerId) && request.resource.data.organizerId == resource.data.organizerId;
      allow delete: if isExistingOrganizer(resource.data.organizerId);
    }

    /**
     * @description Manages forums associated with events, restricting creation to event organizers.
     * @path /events/{eventId}/forums/{forumId}
     * @allow (get, list) Any user can read forum data within an event.
     * @allow (create) User with ID 'user123' can create a forum if they are the event organizer.
     * @deny (create) User with ID 'user456' cannot create a forum if they are not the event organizer.
     * @principle Restricts forum creation to the event organizer, inheriting authorization from the parent event.
     */
    match /events/{eventId}/forums/{forumId} {
      function isOrganizerOfEvent(eventId) {
          return get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && isOrganizerOfEvent(eventId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages messages within forums, ensuring only authorized users can create them.
     * @path /events/{eventId}/forums/{forumId}/messages/{messageId}
     * @allow (get, list) Any user can read messages within a forum.
     * @allow (create) User with ID 'user123' can create a message if they are authorized in the parent forum.
     * @deny (create) User with ID 'user456' cannot create a message if they are not authorized in the parent forum.
     * @principle Restricts message creation to authorized users within a forum, inheriting authorization from the parent forum.
     */
    match /events/{eventId}/forums/{forumId}/messages/{messageId} {
        allow get: if true;
        allow list: if true;
        allow create: if request.auth != null && get(/databases/$(database)/documents/events/$(eventId)/forums/$(forumId)).data != null; // Check if forum exists
        allow update: if false;
        allow delete: if false;
    }
  }
}