/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows open read access with owner-only writes for other collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user.
 * - /events/{eventId}/forums/{forumId}: Stores forum information related to an event. Publicly readable, owner-only editable.
 * - /events/{eventId}/forums/{forumId}/messages/{messageId}: Stores messages within a forum. Publicly readable, owner-only editable.
 *
 * Key Security Decisions:
 * - User profiles are strictly private, accessible only to the owning user.
 * - Public collections (events, forums, messages) are readable by everyone, but only the owner can create, update, or delete documents.
 * - No listing of users is allowed.
 *
 * Denormalization for Authorization:
 * The data model does not contain explicit ownership information for forums and messages.
 * To securely implement public read with owner-only writes, an `ownerId` field
 * should be added to both the `Forum` and `Message` entities.
 *
 * Structural Segregation:
 * The application uses separate collections for public (events, forums, messages)
 * and private (user profiles) data, which is more secure and performant than
 * using a single collection with a boolean flag.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get) User with UID "ZOPHAPAq2tOG1ZjKNTUTsqxg3t33" can read their own profile.
     * @allow (create) User with UID "ZOPHAPAq2tOG1ZjKNTUTsqxg3t33" can create their own profile.
     * @allow (update) User with UID "ZOPHAPAq2tOG1ZjKNTUTsqxg3t33" can update their own profile.
     * @allow (delete) User with UID "ZOPHAPAq2tOG1ZjKNTUTsqxg3t33" can delete their own profile.
     * @deny (get) User with UID "OTHER_USER_ID" cannot read user profile of "ZOPHAPAq2tOG1ZjKNTUTsqxg3t33".
     * @deny (create) User with UID "OTHER_USER_ID" cannot create user profile for "ZOPHAPAq2tOG1ZjKNTUTsqxg3t33".
     * @deny (update) User with UID "OTHER_USER_ID" cannot update user profile of "ZOPHAPAq2tOG1ZjKNTUTsqxg3t33".
     * @deny (delete) User with UID "OTHER_USER_ID" cannot delete user profile of "ZOPHAPAq2tOG1ZjKNTUTsqxg3t33".
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Allow the user to read their own profile.
      allow get: if isOwner(userId);
      // Allow the user to create their own profile, enforcing that the userId in the path matches the authenticated user's ID.
      allow create: if isOwner(userId) && request.resource.data.name is string && request.resource.data.email is string;
      // Allow the user to update their own profile.
      allow update: if isOwner(userId) && resource != null;
      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
      //Do not allow listing all users
      allow list: if false;
    }

    /**
     * @description Controls access to forums associated with events.
     * @path /events/{eventId}/forums/{forumId}
     * @allow (get) Any user can read forum information.
     * @allow (list) Any user can list forums.
     * @deny (create) No one can create a forum without the ownerId being set. //TODO after ownerId is set.
     * @deny (update) No one can update a forum without being the owner. //TODO after ownerId is set.
     * @deny (delete) No one can delete a forum without being the owner. //TODO after ownerId is set.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /events/{eventId}/forums/{forumId} {
      allow get, list: if true;
      // CRITICAL: Cannot implement owner-only writes. The 'Forum' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to messages within a forum.
     * @path /events/{eventId}/forums/{forumId}/messages/{messageId}
     * @allow (get) Any user can read a message.
     * @allow (list) Any user can list messages in a forum.
     * @deny (create) No one can create a message without the ownerId being set. //TODO after ownerId is set.
     * @deny (update) No one can update a message without being the owner. //TODO after ownerId is set.
     * @deny (delete) No one can delete a message without being the owner. //TODO after ownerId is set.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /events/{eventId}/forums/{forumId}/messages/{messageId} {
      allow get, list: if true;
      // CRITICAL: Cannot implement owner-only writes. The 'Message' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper function to determine if the request is made by the owner of the resource.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    // Helper function to determine if the request is made by the owner of the resource and the resource exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}